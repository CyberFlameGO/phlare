syntax = "proto3";

package ingester.v1;

import "common/v1/common.proto";
import "push/v1/push.proto";

service IngesterService {
  rpc Push(push.v1.PushRequest) returns (push.v1.PushResponse) {}
  rpc LabelValues(LabelValuesRequest) returns (LabelValuesResponse) {}
  rpc ProfileTypes(ProfileTypesRequest) returns (ProfileTypesResponse) {}
  rpc Series(SeriesRequest) returns (SeriesResponse) {}
  rpc Flush(FlushRequest) returns (FlushResponse) {}

  // Todo(ctovena) we might want to batch stream profiles & symbolization instead of sending them all at once.
  // but this requires to ensure we have correct timestamp and labels ordering.

  // Select on Profiles without their samples.
  rpc SelectProfiles(SelectProfilesRequest) returns (stream SelectProfilesResponse) {}

  // Merge by stacktraces, but selecting profiles IDS.
  rpc SelectStacktraceSamples(stream SelectStacktraceSamplesRequest) returns (SelectStacktraceSamplesResponse) {}
}

message LabelValuesRequest {
  string name = 1;
}

message LabelValuesResponse {
  repeated string names = 1;
}

message ProfileTypesRequest {}

message ProfileTypesResponse {
  repeated common.v1.ProfileType profile_types = 1;
}

message SeriesRequest {
  repeated string matchers = 1;
}

message SeriesResponse {
  repeated common.v1.Labels labels_set = 2;
}

message FlushRequest {}

message FlushResponse {}

message SelectProfilesRequest {
  string label_selector = 1;
  common.v1.ProfileType type = 2;
  int64 start = 3;
  int64 end = 4;
}

message SelectProfilesResponse {
  repeated Profile profiles = 1;
  repeated Labels  labelsets = 2;
}

// Profile represents a point in time profile.
message Profile {
  // The ID of the profile.
  string ID = 1;
  // the index to the labels (from `SelectProfilesResponse.labelsets`) for this profile
  int64 labelset_index = 2;
  // Timestamp is when that profile was created
  int64 timestamp = 3;
  // // The list of stracktraces for the profile with their respective value
  // repeated StacktraceSample stacktraces = 5;
  int64 total_value = 4;
}

message Labels {
  // LabelPair is the key value pairs to identify the corresponding profile
  repeated common.v1.LabelPair labels = 1;
}



message SelectStacktraceSamplesRequest{
  // This would only be read the first time.
  SelectProfilesRequest SelectProfiles = 1;
  // This can be send multiple times.
  repeated string ids = 2;
}

// SelectStacktraceSamplesResponse is a stream of SelectStacktraceSamplesResponse.
message SelectStacktraceSamplesResponse{

  repeated string names = 1;

  repeated Location locations=2;

  // stacktrace is the stacktrace of the function that was selected.
  repeated StacktraceSample stacktraces = 3;

}

message Location{
  int64 location_id = 1;
  repeated int64 function_ids = 2;
}

message StacktraceSample {
  int64 location_id = 1;
  int64 value = 2;
}
